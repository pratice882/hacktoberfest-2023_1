You have got a maze, which is a n*n Grid. Every cell of the maze contains these numbers 1, 2 or 3. 
If it contains 1 : means we can go Right from that cell only.
If it contains 2 : means we can go Down from that cell only.
If it contains 3 : means we can go Right and Down to both paths from that cell.
We cant go out of the maze at any time.
Initially, You are on the Top Left Corner of The maze(Entry). And, You need to go to the Bottom Right Corner of the Maze(Exit).
You need to find the total number of paths from Entry to Exit Point.
There may be many paths but you need to select that path which contains the maximum number of Adventure.
The Adventure on a path is calculated by taking the sum of all the cell values thatlies in the path.
 

Example 1:

Input: matrix = {{1,1,3,2,1},{3,2,2,1,2},
{1,3,3,1,3},{1,2,3,1,2},{1,1,1,3,1}}
Output: {4,18}
Explanation: There are total 4 Paths Available 
out of which The Max Adventure is 18. Total 
possible Adventures are 18,17,17,16. Of these 
18 is the maximum.




def maxAdventure(matrix):
    n = len(matrix)
    
    # Create a 2D list to store the maximum adventure values
    maxAdventure = [[0 for _ in range(n)] for _ in range(n)]
    
    # Initialize the maximum adventure for the first cell
    maxAdventure[0][0] = matrix[0][0]
    
    # Fill the first row and first column of the maxAdventure matrix
    for i in range(1, n):
        maxAdventure[i][0] = maxAdventure[i-1][0] + matrix[i][0]
        maxAdventure[0][i] = maxAdventure[0][i-1] + matrix[0][i]
    
    # Fill the remaining cells
    for i in range(1, n):
        for j in range(1, n):
            # Update maxAdventure[i][j] based on the value in the cell
            if matrix[i][j] == 1:
                maxAdventure[i][j] = max(maxAdventure[i-1][j], maxAdventure[i][j-1]) + matrix[i][j]
            elif matrix[i][j] == 2:
                maxAdventure[i][j] = max(maxAdventure[i-1][j], maxAdventure[i][j-1]) + matrix[i][j]
            else:
                maxAdventure[i][j] = max(max(maxAdventure[i-1][j], maxAdventure[i][j-1]), maxAdventure[i-1][j-1]) + matrix[i][j]
    
    # The result is the adventure value at the bottom-right corner
    max_path = maxAdventure[n-1][n-1]
    
    # Find the number of paths with maximum adventure
    def countPaths(i, j, path_sum):
        if i == j == n-1:
            return 1
        count = 0
        if i + 1 < n and maxAdventure[i+1][j] + path_sum == max_path:
            count += countPaths(i+1, j, path_sum + matrix[i+1][j])
        if j + 1 < n and maxAdventure[i][j+1] + path_sum == max_path:
            count += countPaths(i, j+1, path_sum + matrix[i][j+1])
        return count
    
    num_paths = countPaths(0, 0, matrix[0][0])
    
    return num_paths, max_path

# Example
matrix = [[1,1,3,2,1],
          [3,2,2,1,2],
          [1,3,3,1,3],
          [1,2,3,1,2],
          [1,1,1,3,1]]
          
num_paths, max_adventure = maxAdventure(matrix)
print(num_paths, max_adventure)
